generator client {
  provider = "prisma-client-js"
}

// ERD生成を一時的に無効化（ビルドエラー回避のため）
// generator erd {
//   provider = "prisma-erd-generator"
//   output   = "../public/erd.svg"
//   include  = ["*"]
//   engine   = "mermaid"
// }

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 年間目標
model AnnualTarget {
  id                      Int      @id @default(autoincrement())
  year                    Int // 年 (例: 2025)
  store_id                Int // 店舗ID
  target_sales_amount     Decimal  @db.Decimal(12, 2) // 年間売上目標
  target_customer_count   Int // 年間客数目標
  target_total_items_sold Int? // 年間総売上点数目標 (任意)
  created_at              DateTime @default(now()) @db.Timestamp(6)
  updated_at              DateTime @updatedAt @db.Timestamp(6)

  store           stores          @relation(fields: [store_id], references: [id])
  monthly_targets MonthlyTarget[]

  @@unique([year, store_id]) // 同一店舗で同一年の目標はユニーク
}

// 月間目標
model MonthlyTarget {
  id                      Int      @id @default(autoincrement())
  annual_target_id        Int
  month                   Int // 月 (1-12)
  allocation_percentage   Decimal  @db.Decimal(5, 4) // 年間目標からの割り振り割合 (例: 0.1 for 10%)
  target_sales_amount     Decimal  @db.Decimal(12, 2) // 月間売上目標 (年間目標と割合から計算)
  target_customer_count   Int // 月間客数目標 (年間目標と割合から計算)
  target_total_items_sold Int? // 月間総売上点数目標 (任意)
  created_at              DateTime @default(now()) @db.Timestamp(6)
  updated_at              DateTime @updatedAt @db.Timestamp(6)

  annual_target  AnnualTarget   @relation(fields: [annual_target_id], references: [id])
  weekly_targets WeeklyTarget[]

  @@unique([annual_target_id, month]) // 同一の年間目標内で同一月はユニーク
}

// 週間目標
model WeeklyTarget {
  id                      Int      @id @default(autoincrement())
  monthly_target_id       Int
  start_date              DateTime @db.Date // 週の開始日
  end_date                DateTime @db.Date // 週の終了日
  target_sales_amount     Decimal  @db.Decimal(12, 2) // 週間売上目標
  target_customer_count   Int // 週間客数目標
  target_total_items_sold Int? // 週間総売上点数目標 (任意)
  created_at              DateTime @default(now()) @db.Timestamp(6)
  updated_at              DateTime @updatedAt @db.Timestamp(6)

  monthly_target MonthlyTarget @relation(fields: [monthly_target_id], references: [id])
  daily_targets  DailyTarget[]

  @@unique([monthly_target_id, start_date]) // 同一の月間目標内で同一週の開始日はユニーク
}

// 日別目標
model DailyTarget {
  id                      Int      @id @default(autoincrement())
  weekly_target_id        Int
  date                    DateTime @db.Date // 日付
  target_sales_amount     Decimal  @db.Decimal(12, 2) // 日別売上目標
  target_customer_count   Int // 日別客数目標
  target_total_items_sold Int? // 日別総売上点数目標 (任意)
  created_at              DateTime @default(now()) @db.Timestamp(6)
  updated_at              DateTime @updatedAt @db.Timestamp(6)

  weekly_target WeeklyTarget @relation(fields: [weekly_target_id], references: [id])

  @@unique([weekly_target_id, date]) // 同一の週間目標内で同一日はユニーク
}

model Account {
  id                String  @id
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  userId            String  @db.Uuid
  users             users   @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id
  sessionToken String   @unique
  expires      DateTime
  userId       String   @db.Uuid
  users        users    @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model recipe {
  id                           Int          @id @default(autoincrement())
  item_id                   Int          @unique
  inspection_standard          Int
  inspection_unit              unit
  manufacturable_quantity      Int
  manufacturable_unit          unit
  manufacturing_cost_per_piece Decimal?     @db.Decimal(10, 2) // ★追加: 製造原価/枚
  packaging_cost_per_piece     Decimal?     @db.Decimal(10, 2) // ★追加: 個包装単価/枚
  product_cost_per_piece       Decimal?     @db.Decimal(10, 2) // ★追加: 商品原価/枚
  created_at                   DateTime?    @default(now()) @db.Timestamp(6)
  updated_at                   DateTime?    @default(now()) @db.Timestamp(6)
  item                     item     @relation(fields: [item_id], references: [id])
  recipeItems                  recipeItem[]
}

model recipeItem {
  id        Int    @id @default(autoincrement())
  recipe_id Int
  item_id   Int
  quantity  Int
  recipe    recipe @relation(fields: [recipe_id], references: [id])
  item      item   @relation(fields: [item_id], references: [id])
}

// product（レジ登録製品）とitem（発注用アイテム）の中間テーブル
model ProductItem {
  id         Int      @id @default(autoincrement())
  product_id Int
  item_id    Int
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @updatedAt @db.Timestamp(6)
  
  product products @relation(fields: [product_id], references: [id])
  item    item     @relation(fields: [item_id], references: [id])
  
  @@unique([product_id, item_id])
}

model item {
  id                     Int           @id @default(autoincrement())
  type                   orderItemType
  name                   String
  unit                   unit
  minimum_order_quantity String?
  price                  Decimal       @db.Decimal(10, 2)
  orderItem              orderItem[]
  recipeItems            recipeItem[]
  recipe                 recipe[]
  productItems           ProductItem[]
}

model orderItem {
  id         Int       @id @default(autoincrement())
  order_id   Int
  item_id    Int
  quantity   Int
  unit_price Decimal   @db.Decimal(10, 2)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @default(now()) @db.Timestamp(6)
  orders     orders    @relation(fields: [ordersId], references: [id])
  ordersId   Int
  item       item      @relation(fields: [itemId], references: [id])
  itemId     Int
}

model orders {
  id                     Int         @id @default(autoincrement())
  store_id               Int
  user_id                String?     @db.Uuid
  other_delivery_address String?
  holiday                holiday?
  request_message        String?
  total_amount           Decimal     @db.Decimal(10, 2)
  status                 status
  order_at               DateTime?   @default(now()) @db.Timestamp(6)
  updated_at             DateTime?   @default(now()) @db.Timestamp(6)
  stores                 stores      @relation(fields: [store_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users                  users?      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  orderItem              orderItem[]
}

model SalesRecord {
  id                 Int      @id @default(autoincrement())
  date               DateTime @db.Date // CSVの「日付」
  store_id           Int // CSVの「店舗」に対応するID
  product_id         Int // CSVの「商品名」に対応するID
  quantity           Int // CSVの「数量」
  unit_price         Decimal  @db.Decimal(10, 2) // CSVの「単価」
  sales_amount       Decimal  @db.Decimal(10, 2) // CSVの「売上」
  customer_attribute String? // CSVの「顧客属性」
  created_at         DateTime @default(now()) @db.Timestamp(6)
  updated_at         DateTime @updatedAt @db.Timestamp(6)

  // リレーション
  store   stores   @relation(fields: [store_id], references: [id])
  product products @relation(fields: [product_id], references: [id])

  // 必要に応じて、日付、店舗、商品名でのユニーク制約などを追加することも検討できますが、
  // 現時点では各レコードが独立した売上実績として追加される想定です。
}

model products {
  id            Int           @id @default(autoincrement())
  store_id      Int
  category_id   Int? // カテゴリIDを追加
  image_url     String
  name          String
  description   String?
  status        status
  price         Decimal       @db.Decimal(10, 2)
  stock         Int
  available_at  DateTime      @db.Timestamp(6)
  created_at    DateTime?     @default(now()) @db.Timestamp(6)
  updated_at    DateTime?     @default(now()) @db.Timestamp(6)
  sales_records SalesRecord[]
  stores        stores        @relation(fields: [store_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  category      categories?   @relation(fields: [category_id], references: [id], onDelete: SetNull, onUpdate: NoAction)
  productItems  ProductItem[]
}

// 既存の stores モデルにリレーションを追加
model stores {
  id              Int             @id @default(autoincrement())
  name            String
  address         String
  phone           String
  email           String
  status          status          @default(active)
  created_at      DateTime?       @default(now()) @db.Timestamp(6)
  updated_at      DateTime?       @default(now()) @db.Timestamp(6)
  orders          orders[]
  products        products[]
  users           users[]
  sales_records   SalesRecord[]
  register_closes RegisterClose[]
  annual_targets  AnnualTarget[] // ★追加: storesから年間目標へのリレーション
}

model users {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String?
  email          String    @unique
  email_verified DateTime? @db.Timestamp(6)
  image          String?
  role           role?     @default(store_staff)
  store_id       Int?
  created_at     DateTime? @default(now()) @db.Timestamp(6)
  updated_at     DateTime? @default(now()) @db.Timestamp(6)
  Account        Account[]
  Session        Session[]
  orders         orders[]
  stores         stores?   @relation(fields: [store_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model categories {
  id         Int       @id @default(autoincrement())
  code       String    @unique // カテゴリコード（例：00000014）
  name       String // カテゴリ名（例：テリーヌ（セット））
  level      Int       @default(1) // カテゴリレベル（1: カテゴリ1, 2: カテゴリ2）
  parent_id  Int? // 親カテゴリID（カテゴリ2の場合）
  status     status    @default(active)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @default(now()) @db.Timestamp(6)

  products products[]
  children categories[] @relation("CategoryHierarchy")
  parent   categories?  @relation("CategoryHierarchy", fields: [parent_id], references: [id], onDelete: SetNull, onUpdate: NoAction)
}

model RegisterClose {
  id                    Int      @id @default(autoincrement())
  date                  DateTime @db.Date
  store_id              Int
  customer_count        Int
  total_sales           Decimal  @db.Decimal(12, 2)
  male_count            Int      @default(0)
  female_count          Int      @default(0)
  unspecified_count     Int      @default(0)
  cash_amount           Decimal  @db.Decimal(12, 2) @default(0)
  credit_amount         Decimal  @db.Decimal(12, 2) @default(0)
  point_amount          Decimal  @db.Decimal(12, 2) @default(0)
  electronic_money_amount Decimal @db.Decimal(12, 2) @default(0)
  created_at            DateTime @default(now()) @db.Timestamp(6)
  updated_at            DateTime @updatedAt @db.Timestamp(6)

  store stores @relation(fields: [store_id], references: [id])

  @@unique([date, store_id])
}

// バックログアイテム
model BacklogItem {
  id              Int       @id @default(autoincrement())
  title           String
  description     String?
  priority        BacklogPriority @default(medium)
  status          BacklogStatus @default(todo)
  assignee        String?
  estimated_hours Int?
  actual_hours    Int?
  due_date        DateTime? @db.Date
  tags            String[]  @default([])
  git_branch      String?
  git_commit      String?
  created_at      DateTime  @default(now()) @db.Timestamp(6)
  updated_at      DateTime  @updatedAt @db.Timestamp(6)
}

enum role {
  admin
  store_manager
  store_staff
}

enum status {
  active
  inactive
  archived
}

enum unit {
  g
  kg
  袋
  本
  枚
  巻
  個
  冊
  式
  束
  台
  箱
  粒
  ケース
  セット
  バルク
  ロット
  缶
  BT
  樽
  ｹｰｽ
  着
  なし
}

enum orderItemType {
  食材
  商品
  資材
  特殊
}

enum holiday {
  月
  火
  水
  木
  金
  土
  日
}

enum BacklogPriority {
  low
  medium
  high
  urgent
}

enum BacklogStatus {
  todo
  in_progress
  review
  done
}
